{"version":3,"sources":["index.js"],"names":["CountdownTimer","selector","targetDate","_elements","_getElements","_targetDate","_init","_startCount","timerId","refs","dayCell","document","querySelector","hourCell","minCell","secCell","time","pad","value","String","padStart","calculatedTime","days","Math","floor","hours","mins","secs","remainingTime","_convertTime","Date","textContent","_initVals","timerActivity","setInterval","clearInterval","timer"],"mappings":";;;AA2EA,aAAA,SAAA,EAAA,EAAA,GAAA,KAAA,aAAA,GAAA,MAAA,IAAA,UAAA,qCAAA,SAAA,EAAA,EAAA,GAAA,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,OAAA,IAAA,CAAA,IAAA,EAAA,EAAA,GAAA,EAAA,WAAA,EAAA,aAAA,EAAA,EAAA,cAAA,EAAA,UAAA,IAAA,EAAA,UAAA,GAAA,OAAA,eAAA,EAAA,EAAA,IAAA,IAAA,SAAA,EAAA,EAAA,EAAA,GAAA,OAAA,GAAA,EAAA,EAAA,UAAA,GAAA,GAAA,EAAA,EAAA,GAAA,EA3EA,QAAA,0BAEMA,IAAAA,EAAAA,WACgC,SAAA,EAAA,GAAvBC,IAAAA,EAAAA,EAAAA,SAAUC,EAAAA,EAAAA,WAAa,EAAA,KAAA,GAC3BC,KAAAA,UAAY,KAAKC,aAAaH,GAC9BI,KAAAA,YAAcH,EACdI,KAAAA,QACAC,KAAAA,cAoEX,OAAA,EAAA,EAAA,CAAA,CAAA,IAAA,eAjEE,MAAA,SAAaC,GAQFC,MAPM,CACTC,QAASC,SAASC,cAAiBJ,GAAAA,OAAAA,EAD1B,yBAETK,SAAUF,SAASC,cAAiBJ,GAAAA,OAAAA,EAF3B,0BAGTM,QAASH,SAASC,cAAiBJ,GAAAA,OAAAA,EAH1B,yBAITO,QAASJ,SAASC,cAAiBJ,GAAAA,OAAAA,EAA1B,4BA4DnB,CAAA,IAAA,eAtDE,MAAA,SAAaQ,GACTC,IAAAA,EAAM,SAAUC,GACDC,OAAAA,OAAOD,GAAOE,SAAS,EAAG,MAYlCC,OATiB,SAAUL,GAM3B,MAAA,CAACM,KALKL,EAAIM,KAAKC,MAAMR,EAAQ,QAKtBS,MAJAR,EAAIM,KAAKC,MAAOR,EAAQ,MAAyB,OAI1CU,KAHRT,EAAIM,KAAKC,MAAOR,EAAQ,KAAoB,MAG9BW,KAFdV,EAAIM,KAAKC,MAAOR,EAAQ,IAAc,OAK5CK,CAAeL,KAwC5B,CAAA,IAAA,YApCE,MAAA,WACEY,IAAAA,EAAgB,KAAKC,aAAa,KAAKxB,YAAc,IAAIyB,MAC9C3B,KAAAA,UAAUO,QAAQqB,YAAcH,EAAcN,KAC9CnB,KAAAA,UAAUU,SAASkB,YAAcH,EAAcH,MAC/CtB,KAAAA,UAAUW,QAAQiB,YAAcH,EAAcF,KAC9CvB,KAAAA,UAAUY,QAAQgB,YAAcH,EAAcD,OA+B7D,CAAA,IAAA,QA5BE,MAAA,WAEY,GAAA,KAAKtB,aAAe,IAAIyB,KAK5B,OAJK3B,KAAAA,UAAUO,QAAQqB,YAFL,KAGb5B,KAAAA,UAAUU,SAASkB,YAHN,KAIb5B,KAAAA,UAAUW,QAAQiB,YAJL,UAKb5B,KAAAA,UAAUY,QAAQgB,YALL,MASjBC,KAAAA,cAkBX,CAAA,IAAA,cAdE,MAAA,WAAc,IAAA,EAAA,KACJC,EAAgBC,YAAY,WAE1B,EAAKhC,YAAc,IAAI4B,KACvBK,cAAcF,GAIlB,EAAKD,aAEN,SAIT,EAzEMhC,GAyEAoC,EAAQ,IAAIpC,EAAe,CACjCC,SAAU,WACVC,WAAY,IAAI4B,KAAK","file":"src.551ba5ed.js","sourceRoot":"../src","sourcesContent":["import '../src/style/style.css';\n\nclass CountdownTimer {\n  constructor({selector, targetDate}) {\n      this._elements = this._getElements(selector);\n      this._targetDate = targetDate;\n      this._init();\n      this._startCount();\n  }\n\n  _getElements(timerId) {\n      const refs = {\n          dayCell: document.querySelector(`${timerId} [data-value=\"days\"]`),\n          hourCell: document.querySelector(`${timerId} [data-value=\"hours\"]`),\n          minCell: document.querySelector(`${timerId} [data-value=\"mins\"]`),\n          secCell: document.querySelector(`${timerId} [data-value=\"secs\"]`),\n      }\n      \n      return refs;\n  }\n\n  _convertTime(time) {\nconst pad = function (value) {\n              return String(value).padStart(2, '0');\n      };\n      \n       const calculatedTime = function (time) {\n      const days = pad(Math.floor(time / (1000 * 60 * 60 * 24)));\n      const hours = pad(Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)));\n      const mins = pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));\n      const secs = pad(Math.floor((time % (1000 * 60)) / 1000));\n\n      return {days, hours, mins, secs };\n      };\n      \n      return calculatedTime(time);\n\n  }\n\n  _initVals() {\nlet remainingTime = this._convertTime(this._targetDate - new Date());\n          this._elements.dayCell.textContent = remainingTime.days;\n          this._elements.hourCell.textContent = remainingTime.hours;\n          this._elements.minCell.textContent = remainingTime.mins;\n          this._elements.secCell.textContent = remainingTime.secs;\n  }\n\n  _init() {\n      const passedDateVal = '00';\n          if (this._targetDate <= new Date()) {\n          this._elements.dayCell.textContent = passedDateVal;\n          this._elements.hourCell.textContent = passedDateVal;\n          this._elements.minCell.textContent = passedDateVal;\n          this._elements.secCell.textContent = passedDateVal;\n          return;\n      }\n\n      this._initVals();\n      \n  }\n\n  _startCount() {\n      const timerActivity = setInterval(() => {\n\n          if (this.targetDate <= new Date()) {\n              clearInterval(timerActivity);\n              return;\n          }\n          \n          this._initVals();\n          \n      }, 1000);\n  }\n};\n\nconst timer = new CountdownTimer({\nselector: '#timer-1',\ntargetDate: new Date('Jun 25, 2021'),\n});\n \n"]}